var geoApiGouvAdresse=function(e,t){"use strict";function o(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var n=o(t);return e.search=(e,t)=>{return o=void 0,i=void 0,a=function*(){if("string"!=typeof e)throw new TypeError("expected argument 1 to be a string");(e=>{const t=["limit","autocomplete","longitude","latitude","type","postcode","citycode"],o=["street","house","locality","city","region","country"];if(void 0===e)return;if(!(e instanceof Object))throw new TypeError("expected argument 2 to be an Object");const n=Object.keys(e).filter(e=>!t.includes(e));if(n.length>0){const e=n.join(", "),o=t.join(", ");throw new TypeError(`unknown option ${e} (allowed: ${o})`)}if("limit"in e){if("number"!=typeof e.limit)throw new TypeError("expected key options.limit to be a Number");if(e.limit<1)throw new RangeError("expected key options.limit to be greater or equal to 1")}if("autocomplete"in e&&"boolean"!=typeof e.autocomplete)throw new TypeError("expected key options.autocomplete to be a Boolean");if("longitude"in e){if("number"!=typeof e.longitude)throw new TypeError("expected key options.longitude to be a Number");if(e.longitude<-180||e.longitude>180)throw new RangeError("expected key options.longitude to be between -180 and 180")}if("latitude"in e){if("number"!=typeof e.latitude)throw new TypeError("expected key options.latitude to be a Number");if(e.latitude<0||e.latitude>90)throw new RangeError("expected key options.latitude to be between 0 and 90")}if("type"in e){if("string"!=typeof e.type)throw new TypeError("expected key options.type to be a String");if(!o.includes(e.type)){const t=o.join(", ");throw new Error(`unknown value ${e.type} for key options.type (allowed: ${t})`)}}if("postcode"in e&&"string"!=typeof e.postcode)throw new TypeError("expected key options.postcode to be a String");if("citycode"in e&&"string"!=typeof e.citycode)throw new TypeError("expected key options.citycode to be a String")})(t);const o=((e,t)=>{const o=new URL("https://api-adresse.data.gouv.fr/search/");return o.searchParams.append("q",e),t instanceof Object&&("autocomplete"in t&&"boolean"==typeof t.autocomplete&&o.searchParams.append("autocomplete",t.autocomplete.toString()),"longitude"in t&&"number"==typeof t.longitude&&o.searchParams.append("longitude",t.longitude.toString()),"latitude"in t&&"number"==typeof t.latitude&&o.searchParams.append("latitude",t.latitude.toString()),"type"in t&&"string"==typeof t.type&&o.searchParams.append("type",t.type),"postcode"in t&&"string"==typeof t.postcode&&o.searchParams.append("postcode",t.postcode),"citycode"in t&&"string"==typeof t.citycode&&o.searchParams.append("citycode",t.citycode),"limit"in t&&"number"==typeof t.limit&&o.searchParams.append("limit",t.limit.toString())),o.href})(e,t),i=yield n.default.get(o);if(200!==i.status)throw new Error(`failed to get the results with message ${i.statusText} (code: ${i.status})`);return i.data},new((r=void 0)||(r=Promise))((function(e,t){function n(e){try{c(a.next(e))}catch(e){t(e)}}function p(e){try{c(a.throw(e))}catch(e){t(e)}}function c(t){var o;t.done?e(t.value):(o=t.value,o instanceof r?o:new r((function(e){e(o)}))).then(n,p)}c((a=a.apply(o,i||[])).next())}));var o,i,r,a},e}({},axios);
